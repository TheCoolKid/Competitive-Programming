import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashSet;
import java.util.PriorityQueue;
import java.util.Scanner;

public class Main {

	
	static int to = 0;
	static int time = 1;
	static int hull = 2;
	private static class Vertex implements Comparator<Vertex>, Comparable<Vertex>{
		HashSet<Integer> pastVertex;
		int v;
		int t;
		int w;
		public Vertex(int v, int t, int w,HashSet<Integer>pastVertex){
			this.v = v;
			this.t = t;
			this.w = w;
			this.pastVertex = pastVertex;
		}
		@Override
		public int compare(Vertex o1, Vertex o2) {
			// TODO Auto-generated method stub
			if(o1.t < o2.t)
				return -1;
			else if(o1.t > o2.t)
				return 1;
			else
			return 0;
		}
		@Override
		public int compareTo(Vertex o) {
			// TODO Auto-generated method stub
			return compare(this,o);
		}
	}
	public static int solve(int s, int e,ArrayList<int[]>[] path,int k){
		PriorityQueue<Vertex> vs = new PriorityQueue<Vertex>();
		HashSet<Integer> startset = new HashSet<Integer>();
		startset.add(s);
		Vertex start = new Vertex(s,0,0,startset);
		vs.add(start);
		while(!vs.isEmpty()){
			Vertex cv = vs.remove();
			//System.out.println(cv.t);
			if(cv.v == e){
				return cv.t;
			}
//			System.out.println(path[cv.v].size());
			for(int[] tv: path[cv.v]){
				if(tv[hull]+cv.w < k && !cv.pastVertex.contains(tv[to])){
				Vertex add = new Vertex(tv[to],tv[time],tv[hull],new HashSet<Integer>());
				add.pastVertex.addAll(cv.pastVertex);
				add.pastVertex.add(add.v);
				add.t += cv.t;
				add.w += cv.w;
				vs.add(add);
				}
			}
		}
		return -1;
	}
	public static int solve2(int s, int e,ArrayList<int[]>[] path,int k){
		PriorityQueue<Vertex> vs = new PriorityQueue<Vertex>();
		HashSet<Integer> startset = new HashSet<Integer>();
		Vertex start = new Vertex(s,0,0,startset);
		vs.add(start);
		boolean[] node = new boolean[path.length];
		while(!vs.isEmpty()){
			Vertex cv = vs.remove();
		//	System.out.println(cv.t);
			if(cv.v == e){
				return cv.t;
			}
//			System.out.println(path[cv.v].size());
			for(int[] tv: path[cv.v]){
				if(node[cv.v] == false){
				Vertex add = new Vertex(tv[to],tv[time],0,null);
				add.t += cv.t;
				vs.add(add);
				}
			}
			node[cv.v] = true;
		}
		return -1;
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		long times = System.nanoTime();
		Scanner scan = new Scanner(System.in);
		int k = scan.nextInt();
		int n = scan.nextInt();
		int m = scan.nextInt();
		ArrayList<int[]>[] path = new ArrayList[n];
		for(int i = 0; i < n; i++){
			path[i] = new ArrayList<int[]>();
		}
		for(int i = 0; i < m;i++){
			int a = scan.nextInt()-1;
			int b = scan.nextInt()-1;
			int t = scan.nextInt();
			int h = scan.nextInt();
			int[] stat = new int[3];
			stat[to] = b;
			stat[time] = t;
			stat[hull] = h;
			int[] stat2 = new int[3];
			stat2[to] = a;
			stat2[time] = t;
			stat2[hull] = h;
			path[a].add(stat);
			path[b].add(stat2);
		}
		int s = scan.nextInt() - 1;
		int e = scan.nextInt() - 1;
		scan.close();
		long times = System.nanoTime();
		if(k == 1){
			System.out.println(solve2(s,e,path,k));
		}
		else
		System.out.println(solve(s,e,path,k));
	}

}
