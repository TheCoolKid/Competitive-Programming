
#include <iostream>
#include <unordered_set>
#include <cmath>
using namespace std;

int count2 = 0;
int findRoot(int* store, int i,int n,bool* visited){
	unordered_set<int>* curVisited = new unordered_set<int>();
	curVisited->insert(i);
	visited[i] = true;
	while(store[i] != i){
		store[i] = store[store[i]];
		i = store[i];
		if(curVisited->find(i) != curVisited->end()){
			store[i] = i;
			count2++;
			return i;
		}
		if(visited[i]){
			return -1;
		}
		curVisited->insert(i);
		visited[i] = true;
	}
	return i;

}


int main() {
	int n;
	scanf("%d",&n);
	int* store = new int[n];
	int* store2 = new int[n];
	for(int i = 0; i < n; i++){
		int next;
		scanf("%d",&next);
		store[i] = next - 1;
		store2[i] = next - 1;
	}
	int count = 0;
	unordered_set<int>* roots = new unordered_set<int>();
	int last = 0;
	bool* visited = new bool[n];
	for(int i = 0; i < n; i++){
		visited[i]= false;
	}
	for(int i = 0; i < n; i++){
		if(visited[i])
			continue;
		int root = findRoot(store2, i,n,visited);
		if(root != -1){
			last = root;
			count++;
			roots->insert(root);
		}
	}
	for(auto i = roots->begin(); i != roots-> end(); i++){
		store[*i] = last;
	}
	printf("%I32d\n", max(count - 1,count2));
	for(int i = 0; i < n; i++){
		printf("%d ", store[i] + 1);
	}



	return 0;
}
